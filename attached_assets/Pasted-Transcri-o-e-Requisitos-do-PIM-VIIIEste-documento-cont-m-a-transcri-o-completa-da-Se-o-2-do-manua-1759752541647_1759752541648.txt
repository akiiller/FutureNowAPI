Transcrição e Requisitos do PIM VIIIEste documento contém a transcrição completa da Seção 2 do manual do projeto e um resumo dos requisitos técnicos para o desenvolvimento da API e do aplicativo.Transcrição da Seção 2 do Manual2. INFORMAÇÕES ESPECÍFICAS SOBRE O PIMA empresa de streaming “Future Now” precisa desenvolver um sistema para gerenciar e distribuir seu conteúdo de mídia, que inclui músicas, vídeos e podcasts. Atualmente, a empresa enfrenta desafios com a organização de seu vasto catálogo e a personalização da experiência do usuário. O objetivo é criar uma plataforma robusta que permita aos usuários criar e gerenciar playlists personalizadas, além de fornecer aos administradores as ferramentas necessárias para gerenciar o conteúdo e os criadores.O projeto consiste no desenvolvimento de duas partes principais:Uma Web API RESTful: Será o back-end do sistema, responsável por toda a lógica de negócio e acesso aos dados.Um Aplicativo de Console ou Móvel (em Java): Será o front-end, que consumirá os dados da Web API para exibi-los ao usuário.Escopo do Projeto:Web API (Back-end):Gerenciamento de Conteúdo: A API deve permitir operações de CRUD (Criar, Ler, Atualizar, Deletar) para o conteúdo (músicas, vídeos, podcasts).Gerenciamento de Criadores: Deve ser possível gerenciar os criadores de conteúdo (artistas, podcasters, etc.).Gerenciamento de Usuários: A API deve suportar o cadastro e a gestão de usuários da plataforma.Gerenciamento de Playlists: Funcionalidade central do projeto. Os usuários devem poder:Criar novas playlists.Adicionar e remover conteúdo de suas playlists.Visualizar todas as suas playlists.Deletar playlists.Estrutura de Dados: As seguintes entidades e seus relacionamentos devem ser modelados:Usuário: Possui várias playlists.Playlist: Pertence a um usuário e contém vários conteúdos.Conteúdo: Pode estar em várias playlists e pertence a um criador.Criador: Possui vários conteúdos.Aplicativo Cliente (Front-end em Java):O aplicativo deve se conectar à Web API para obter os dados.Listagem de Playlists: A tela principal deve exibir uma lista de playlists disponíveis (pode ser de um usuário específico ou playlists públicas, a critério do aluno).Visualização de Conteúdo: Ao selecionar uma playlist, o aplicativo deve exibir os conteúdos (músicas, vídeos) que fazem parte dela.Interação Básica: O aplicativo deve ser funcional, permitindo a navegação entre a lista de playlists e os detalhes de uma playlist.Tratamento de Dados: O aplicativo deve ser capaz de receber os dados da API (geralmente em formato JSON) e convertê-los em objetos Java para exibição na interface.Tecnologias Obrigatórias:Back-end: C# com ASP.NET Core Web API.Front-end: Java (Pode ser um aplicativo de console simples, uma aplicação desktop com Swing/JavaFX ou um aplicativo móvel para Android).Banco de Dados: A critério do aluno, podendo ser um banco de dados em memória (para simplificar), SQL Server, SQLite ou outro de sua preferência.O aluno deve focar na implementação correta dos endpoints da API e na sua comunicação com o aplicativo cliente. A interface do usuário do aplicativo pode ser simples, o mais importante é demonstrar que a integração entre o front-end e o back-end está funcionando corretamente.Resumo dos RequisitosAqui está uma lista simplificada do que você precisa entregar em cada parte do projeto:Requisitos da Web API (C# / ASP.NET Core)[ ] Criar 4 Modelos (Entidades): Usuario, Playlist, Conteudo, Criador.[ ] Definir os Relacionamentos:1 Usuario pode ter N Playlists.1 Playlist pode ter N Conteudos.1 Criador pode ter N Conteudos.[ ] Implementar Endpoints CRUD para Playlists:GET /api/playlists - Listar todas as playlists.GET /api/playlists/{id} - Obter uma playlist específica pelo seu ID.POST /api/playlists - Criar uma nova playlist.PUT /api/playlists/{id} - Atualizar uma playlist existente.DELETE /api/playlists/{id} - Deletar uma playlist.[ ] (Opcional, mas recomendado) Implementar endpoints similares para gerenciar Usuarios, Conteudos e Criadores. O foco principal do manual é em Playlists.[ ] Configurar um Banco de Dados: Pode ser um banco de dados em memória (conforme o código que já te forneci) para facilitar os testes.Requisitos do Aplicativo (Java / Android)[ ] Conexão com a API: O app deve ser capaz de fazer requisições HTTP para a sua Web API (especificamente para o endpoint GET /api/playlists).[ ] Tela Principal: Deve haver uma tela que exiba uma lista com as playlists retornadas pela API.[ ] Exibição de Dados: Para cada item na lista, exibir pelo menos o nome da playlist. Se possível, exibir também o nome do usuário que a criou e a quantidade de músicas.[ ] Parse de JSON: O aplicativo precisa pegar a resposta em JSON da API e transformar em uma lista de objetos Playlist em Java.[ ] Navegação (Opcional, mas recomendado): Permitir que o usuário clique em uma playlist para, teoricamente, ver os detalhes (mesmo que a tela de detalhes não seja totalmente implementada, a ação de clique deve funcionar).